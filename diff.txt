diff --git a/smartcity_app/forms/request_forms.py b/smartcity_app/forms/request_forms.py
index 2734796..62a360e 100644
--- a/smartcity_app/forms/request_forms.py
+++ b/smartcity_app/forms/request_forms.py
@@ -58,15 +58,19 @@ class PriorityForm(forms.ModelForm):
     class Meta:
         model = ServiceRequest
         fields = ['priority']
+        prio_choices = [
+            ('Lowest','Lowest'),
+            ('Low','Low'),
+            ('Medium','Medium'),
+            ('High','High'),
+            ('Highest','Highest')
+        ]
 
-    priority = forms.ChoiceField()
+    priority = forms.ChoiceField(choices=Meta.prio_choices)
 
     def __init__(self, *args, **kwargs):
         super(PriorityForm, self).__init__(*args, **kwargs)
-        choices = [('Lowest','Lowest'),('Low','Low'),('Medium','Medium'),('High','High'),('Highest','Highest')]
 
-        self.fields['priority'].widget.choices = choices
-        self.fields['priority'].widget.required = False
         self.fields['priority'].widget.attrs['onchange'] = 'this.form.submit()'
 
 class EstimatedPriceForm(forms.ModelForm):
@@ -101,20 +105,18 @@ class ChangeStateForm(forms.ModelForm):
     class Meta:
         model = ServiceRequest
         fields = ['state']
-
-    state = forms.ChoiceField()
-
-    def __init__(self, *args, **kwargs):
-        super(ChangeStateForm, self).__init__(*args, **kwargs)
-
         state_choices = [
             ('Open', 'Open'),
             ('In Progress', 'In Progress'),
             ('Finished', 'Finished'),
         ]
 
-        self.fields['state'].widget.choices = state_choices
-        self.fields['state'].widget.required = False
+    state = forms.ChoiceField(choices=Meta.state_choices)
+
+    def __init__(self, *args, **kwargs):
+        super(ChangeStateForm, self).__init__(*args, **kwargs)
+
+
         self.fields['state'].widget.attrs['onchange'] = 'this.form.submit()'
 
 class AssignTechnicianForm(forms.ModelForm):
diff --git a/smartcity_app/forms/ticket_forms.py b/smartcity_app/forms/ticket_forms.py
index d422606..9fb2d93 100644
--- a/smartcity_app/forms/ticket_forms.py
+++ b/smartcity_app/forms/ticket_forms.py
@@ -35,22 +35,21 @@ class ChangeStateForm(forms.ModelForm):
         model = Ticket
         fields = ['state']
 
-    state = forms.ChoiceField()
-
-    def __init__(self, *args, **kwargs):
-        super(ChangeStateForm, self).__init__(*args, **kwargs)
-
         state_choices = [
             ('Open', 'Open'),
-            ('Waiting', 'Waiting'),
+            ('Waiting For Approval', 'Waiting'),
             ('In Progress', 'In Progress'),
             ('Closed: Denied', 'Closed: Denied'),
             ('Closed: Fixed', 'Closed: Fixed'),
             ('Closed: Duplicate', 'Closed: Duplicate'),
         ]
+    state = forms.ChoiceField(choices=Meta.state_choices)
 
-        self.fields['state'].widget.choices = state_choices
-        self.fields['state'].widget.required = False
+    def __init__(self, *args, **kwargs):
+        super(ChangeStateForm, self).__init__(*args, **kwargs)
+
+
+        # self.fields['state'].widget.choices = state_choices
         self.fields['state'].widget.attrs['onchange'] = 'this.form.submit()'
 
 class UploadImageForm(forms.ModelForm):
@@ -79,15 +78,19 @@ class PriorityForm(forms.ModelForm):
     class Meta:
         model = Ticket
         fields = ['priority']
+        prio_choices = [
+            ('Lowest','Lowest'),
+            ('Low','Low'),
+            ('Medium','Medium'),
+            ('High','High'),
+            ('Highest','Highest')
+        ]
 
-    priority = forms.ChoiceField()
+    priority = forms.ChoiceField(choices=Meta.prio_choices)
 
     def __init__(self, *args, **kwargs):
         super(PriorityForm, self).__init__(*args, **kwargs)
-        choices = [('Lowest','Lowest'),('Low','Low'),('Medium','Medium'),('High','High'),('Highest','Highest')]
 
-        self.fields['priority'].widget.choices = choices
-        self.fields['priority'].widget.required = False
         self.fields['priority'].widget.attrs['onchange'] = 'this.form.submit()'
 
 class TicketFilterForm(forms.Form):
diff --git a/smartcity_app/templates/requests/details.html b/smartcity_app/templates/requests/details.html
index a7b143a..c8d2635 100644
--- a/smartcity_app/templates/requests/details.html
+++ b/smartcity_app/templates/requests/details.html
@@ -64,7 +64,6 @@
     {% if allow_tech_changes %}
     <form action="" method="POST">
         {% csrf_token %}
-        <!-- <input type="date"> -->
         Expected Completion Date: {{ expected_date_form.days_remaining }}
     </form>
     <form action="" method="POST">
diff --git a/smartcity_app/templates/tickets/created_by.html b/smartcity_app/templates/tickets/created_by.html
index 2aecac5..120e9b3 100644
--- a/smartcity_app/templates/tickets/created_by.html
+++ b/smartcity_app/templates/tickets/created_by.html
@@ -91,7 +91,7 @@
         <span class="badge bg-danger"> {{ ticket.state }} </span>
         {% elif ticket.state == 'Closed: Fixed' %}
         <span class="badge bg-success"> {{ ticket.state }} </span>
-        {% elif ticket.state == 'Waiting' %}
+        {% elif ticket.state == 'Waiting For Approval' %}
         <span class="badge bg-secondary"> {{ ticket.state }} </span>
         {% elif ticket.state == 'In Progress' %}
         <span class="badge bg-warning"> {{ ticket.state }} </span>
diff --git a/smartcity_app/templates/tickets/details.html b/smartcity_app/templates/tickets/details.html
index 448fdbc..b6df285 100644
--- a/smartcity_app/templates/tickets/details.html
+++ b/smartcity_app/templates/tickets/details.html
@@ -8,7 +8,7 @@
     <span class="badge bg-danger"> {{ ticket.state }} </span>
     {% elif ticket.state == 'Closed: Fixed' %}
     <span class="badge bg-success"> {{ ticket.state }} </span>
-    {% elif ticket.state == 'Waiting' %}
+    {% elif ticket.state == 'Waiting For Approval' %}
     <span class="badge bg-secondary"> {{ ticket.state }} </span>
     {% elif ticket.state == 'In Progress' %}
     <span class="badge bg-warning"> {{ ticket.state }} </span>
diff --git a/smartcity_app/templates/tickets/list.html b/smartcity_app/templates/tickets/list.html
index f9fea8f..a6a23f4 100644
--- a/smartcity_app/templates/tickets/list.html
+++ b/smartcity_app/templates/tickets/list.html
@@ -91,7 +91,7 @@
         <span class="badge bg-danger"> {{ ticket.state }} </span>
         {% elif ticket.state == 'Closed: Fixed' %}
         <span class="badge bg-success"> {{ ticket.state }} </span>
-        {% elif ticket.state == 'Waiting' %}
+        {% elif ticket.state == 'Waiting For Approval' %}
         <span class="badge bg-secondary"> {{ ticket.state }} </span>
         {% elif ticket.state == 'In Progress' %}
         <span class="badge bg-warning"> {{ ticket.state }} </span>
diff --git a/smartcity_app/views/requests_views.py b/smartcity_app/views/requests_views.py
index 8026998..63bfb43 100644
--- a/smartcity_app/views/requests_views.py
+++ b/smartcity_app/views/requests_views.py
@@ -154,39 +154,26 @@ def show_request(request: HttpRequest, id:int) -> HttpResponse:
         return HttpResponseRedirect('/')
 
     serviceRequest = ServiceRequest.objects.filter(id=id).select_related('authorid','technicianid').all().first()
-    print(serviceRequest.authorid)
-    assign_form = {}
-    if currentUserData['role'] == 'Officer':
-        # technician = serviceRequest.technicianid
-        if request.method == 'POST':
-            if 'technicianid' in request.POST:
-                assign_form = AssignTechnicianForm(request.POST)
-                if assign_form.is_valid():
-                    serviceRequest.technicianid = assign_form.cleaned_data['technicianid']
-                    serviceRequest.save()
-
-                    messages.success(request,'Technician assigned.')
-                    return HttpResponseRedirect(f'/requests/list/{id}/')
-            else:
-                commentForm = ServiceRCommentForm(request.POST)
-                comment = commentForm.save(commit=False)
-                comment.requestid_id = id
-                comment.authorid_id = currentUserData['id']
-                comment.save()
-                messages.success(request,'Comment added.')
-                assign_form = AssignTechnicianForm(instance=serviceRequest)
-        else:
-            assign_form = AssignTechnicianForm(instance=serviceRequest)
-            # if serviceRequest.technicianid:
-            #     assign_form.fields['technicianid'].initial = serviceRequest.technicianid.name + ' ' + serviceRequest.technicianid.surname
-            # else:
-            #     assign_form.fields['technicianid'].initial = 'none'
-
-    allow_prio_change = False
-    priority_form = {}
-    if (currentUserData['id'] == serviceRequest.technicianid_id) or (currentUserData['role'] == 'Officer'):
-        allow_prio_change = True
-        if request.method == 'POST':
+
+    allow_prio_change = (currentUserData['id'] == serviceRequest.technicianid_id) or (currentUserData['role'] == 'Officer')
+    allow_tech_changes = (currentUserData['id'] == serviceRequest.technicianid_id)
+
+    assign_form = AssignTechnicianForm(instance=serviceRequest)
+    priority_form = PriorityForm(instance=serviceRequest)
+    estimated_price_form = EstimatedPriceForm(instance=serviceRequest)
+    expected_date_form = ExpectedDateForm(instance=serviceRequest)
+    state_change_form = ChangeStateForm(instance=serviceRequest)
+
+    if request.method == 'POST':
+        if 'technicianid' in request.POST:
+            assign_form = AssignTechnicianForm(request.POST)
+            if assign_form.is_valid():
+                serviceRequest.technicianid = assign_form.cleaned_data['technicianid']
+                serviceRequest.save()
+
+                messages.success(request,'Technician assigned.')
+                return HttpResponseRedirect(f'/requests/list/{id}/')
+        elif 'priority' in request.POST:
             priority_form = PriorityForm(request.POST)
             if priority_form.is_valid():
                 serviceRequest.priority = priority_form.cleaned_data['priority']
@@ -194,47 +181,38 @@ def show_request(request: HttpRequest, id:int) -> HttpResponse:
 
                 messages.success(request,'Priority changed.')
                 return HttpResponseRedirect(f'/requests/list/{id}/')
-        else:
-            priority_form = PriorityForm(instance=serviceRequest)
-
-    allow_tech_changes = False
-    expected_date_form = {}
-    estimated_price_form = {}
-    state_change_form = {}
-    if (currentUserData['id'] == serviceRequest.technicianid_id):
-        allow_tech_changes = True
-        if request.method == 'POST':
-            if 'price' in request.POST:
-                estimated_price_form = EstimatedPriceForm(request.POST)
-                if estimated_price_form.is_valid():
-                    serviceRequest.price = estimated_price_form.cleaned_data['price']
-                    serviceRequest.save()
-
-                    messages.success(request,'Estimated price changed.')
-                    return HttpResponseRedirect(f'/requests/list/{id}/')
-
-            elif 'days_remaining' in request.POST:
-                expected_date_form = ExpectedDateForm(request.POST)
-                if expected_date_form.is_valid():
-                    serviceRequest.days_remaining = expected_date_form.cleaned_data['days_remaining']
-                    serviceRequest.save()
-
-                    messages.success(request,'Expected completion date changed.')
-                    return HttpResponseRedirect(f'/requests/list/{id}/')
-            
-            elif 'state' in request.POST:
-                state_change_form = ChangeStateForm(request.POST)
-                if state_change_form.is_valid():
-                    serviceRequest.state = state_change_form.cleaned_data['state']
-                    serviceRequest.save()
+        elif 'price' in request.POST:
+            estimated_price_form = EstimatedPriceForm(request.POST)
+            if estimated_price_form.is_valid():
+                serviceRequest.price = estimated_price_form.cleaned_data['price']
+                serviceRequest.save()
 
-                    messages.success(request,'Status changed.')
-                    return HttpResponseRedirect(f'/requests/list/{id}/')
+                messages.success(request,'Estimated price changed.')
+                return HttpResponseRedirect(f'/requests/list/{id}/')
+        elif 'days_remaining' in request.POST:
+            expected_date_form = ExpectedDateForm(request.POST)
+            if expected_date_form.is_valid():
+                serviceRequest.days_remaining = expected_date_form.cleaned_data['days_remaining']
+                serviceRequest.save()
 
+                messages.success(request,'Expected completion date changed.')
+                return HttpResponseRedirect(f'/requests/list/{id}/')
+        elif 'state' in request.POST:
+            state_change_form = ChangeStateForm(request.POST)
+            if state_change_form.is_valid():
+                serviceRequest.state = state_change_form.cleaned_data['state']
+                serviceRequest.save()
+
+                messages.success(request,'Status changed.')
+                return HttpResponseRedirect(f'/requests/list/{id}/')
         else:
-            expected_date_form = ExpectedDateForm(instance=serviceRequest)
-            estimated_price_form = EstimatedPriceForm(instance=serviceRequest)
-            state_change_form = ChangeStateForm(instance=serviceRequest)
+            commentForm = ServiceRCommentForm(request.POST)
+            comment = commentForm.save(commit=False)
+            comment.requestid_id = id
+            comment.authorid_id = currentUserData['id']
+            comment.save()
+            messages.success(request,'Comment added.')
+            assign_form = AssignTechnicianForm(instance=serviceRequest)
 
     owner = (serviceRequest.authorid_id == currentUserData['id'])
     comments = ServiceRequestComments.objects.filter(requestid_id = id).all()
diff --git a/smartcity_app/views/tickets_views.py b/smartcity_app/views/tickets_views.py
index 9332ac6..5879824 100644
--- a/smartcity_app/views/tickets_views.py
+++ b/smartcity_app/views/tickets_views.py
@@ -97,47 +97,22 @@ def show_ticket(request: HttpRequest, id:int) -> HttpResponse:
     serviceRequest = ServiceRequest.objects.filter(ticketid = id).all().first()
     images = Image.objects.filter(ticketid=ticket.id).all()
 
-    if request.method == 'POST':
-        if 'text' in request.POST:
-            commentForm = CommentForm(request.POST)
-            comment = commentForm.save(commit=False)
-            comment.ticketid_id = id
-            comment.authorid_id = currentUserData['id']
-            comment.save()
-            messages.success(request,'Comment added.')
-        # if 'priority' in request.POST:
-        #     priorityFormPOST = PriorityForm(request.POST)
-        #     if priorityFormPOST.is_valid():
-        #         ticket.priority = priorityFormPOST.cleaned_data['priority']
-        #         ticket.save()
-
-    # priorityForm = PriorityForm()
-    # priorityForm.fields['priority'].initial = ticket.priority
-
-    allow_state_change = False
-    state_change_form = {}
+    allow_state_change = (currentUserData['role'] == 'Officer')
+    allow_prio_change = (currentUserData['role'] == 'Officer')
 
-    if (currentUserData['role'] == 'Officer'):
-        allow_state_change = True
-        if request.method == 'POST' and 'state' in request.POST:
-            if request.method == 'POST':
-                state_change_form = ChangeStateForm(request.POST)
-                if state_change_form.is_valid():
-                    ticket.state = state_change_form.cleaned_data['state']
-                    # print(state_change_form.cleaned_data['state'])
-                    # print(ticket.state)
-                    ticket.save()
+    state_change_form = ChangeStateForm(instance=ticket)
+    priority_form = PriorityForm(instance=ticket)
 
-                    messages.success(request,'State changed.')
-                    return HttpResponseRedirect(f'/tickets/list/{id}/')
-    else:
-        state_change_form = ChangeStateForm(instance=ticket)
+    if request.method == 'POST':
+        if 'state' in request.POST:
+            state_change_form = ChangeStateForm(request.POST)
+            if state_change_form.is_valid():
+                ticket.state = state_change_form.cleaned_data['state']
+                ticket.save()
 
-    allow_prio_change = False
-    priority_form = {}
-    if (currentUserData['id'] == ticket.authorid_id) or (currentUserData['role'] == 'Officer'):
-        allow_prio_change = True
-        if request.method == 'POST':
+                messages.success(request,'State changed.')
+                return HttpResponseRedirect(f'/tickets/list/{id}/')
+        if 'priority' in request.POST:
             priority_form = PriorityForm(request.POST)
             if priority_form.is_valid():
                 ticket.priority = priority_form.cleaned_data['priority']
@@ -145,10 +120,13 @@ def show_ticket(request: HttpRequest, id:int) -> HttpResponse:
 
                 messages.success(request,'Priority changed.')
                 return HttpResponseRedirect(f'/tickets/list/{id}/')
-        else:
-            priority_form = PriorityForm(instance=ticket)
-
-    
+        if 'text' in request.POST:
+            commentForm = CommentForm(request.POST)
+            comment = commentForm.save(commit=False)
+            comment.ticketid_id = id
+            comment.authorid_id = currentUserData['id']
+            comment.save()
+            messages.success(request,'Comment added.')
 
     comments = TicketComments.objects.filter( ticketid_id = id).all()
     fullComments = []
@@ -176,16 +154,11 @@ def show_ticket(request: HttpRequest, id:int) -> HttpResponse:
         'commentsCount': len(fullComments),
         'comment_form': CommentForm(),
         'priority_form': priority_form,
-        'state_change_form': ChangeStateForm(instance=ticket),
+        'state_change_form': state_change_form,
         'allow_prio_change': allow_prio_change,
         'allow_state_change': allow_state_change,
     }
 
-    # context['comments'] = fullComments
-    # context['commentsCount'] = len(fullComments)
-    # context['comment_form'] = CommentForm()
-    # context['priority_form'] = priority_form
-
     return render(request, 'tickets/details.html', context)
 
 def create_ticket(request: HttpRequest) -> HttpResponse:
